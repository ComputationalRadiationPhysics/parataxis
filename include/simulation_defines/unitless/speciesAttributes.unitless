/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include "traits/PICToOpenPMD.hpp"
#include "traits/SIBaseUnits.hpp"
#include "particles/functors/GetWavelength.hpp"
#include <vector>

namespace parataxis{
namespace traits{

template<typename T_Type, typename T_Frame>
struct OpenPMDUnit<position<T_Type>, T_Frame>
{
    static std::vector<float_64> get()
    {
        std::vector<float_64> unit(simDim);
        /* in-cell position needs two transformations to get to SI:
           in-cell [0;1) -> dimensionless scaling to grid -> SI
        */
        for(uint32_t i=0;i<simDim;++i)
            unit[i]=cellSize[i]*UNIT_LENGTH;

        return unit;
    }

    static std::vector<float_64> getDimension()
    {
        std::vector<float_64> unitDimension( NUnitDimension, 0.0 );
        unitDimension.at(SIBaseUnits::length) = 1.0;

        return unitDimension;
    }
};

template<typename T_Frame>
struct OpenPMDUnit<particleId, T_Frame>
{
    // unitless and not scaled by a factor: by convention 1.0
    static std::vector<float_64> get()
    {
        std::vector<float_64> unit( 1, 1.0 );
        return unit;
    }

    static std::vector<float_64> getDimension()
    {
        // unitless
        return std::vector<float_64>( NUnitDimension, 0.0 );
    }
};

template<>
struct OpenPMDName<direction>
{
    static std::string get()
    {
        return "momentum";
    }
};

template<typename T_Frame>
struct OpenPMDUnit<direction, T_Frame>
{
    // This is a momentum
    static std::vector<float_64> get()
    {

        std::vector<float_64> unit(simDim,
                PLANCK_CONSTANT / particles::functors::GetWavelength<T_Frame, T_Frame>()() * UNIT_MASS * UNIT_LENGTH / UNIT_TIME
                );
        return unit;
    }

    static std::vector<float_64> getDimension()
    {
        std::vector<float_64> result(NUnitDimension, 0);
        result.at(SIBaseUnits::length) =  1.0;
        result.at(SIBaseUnits::mass)   =  1.0;
        result.at(SIBaseUnits::time)   = -1.0;
        return result;
    }
};

template<typename T_Frame>
struct OpenPMDUnit<creationTime, T_Frame>
{
    static std::vector<float_64> get()
    {
        std::vector<float_64> unit( 1, DELTA_T * UNIT_TIME );
        return unit;
    }

    static std::vector<float_64> getDimension()
    {
         std::vector<float_64> result( NUnitDimension, 0.0 );
         result[SIBaseUnits::time] = 1;
         return result;
    }
};

template<typename T_Frame>
struct OpenPMDUnit<startPhase, T_Frame>
{
    // unitless and not scaled by a factor: by convention 1.0
    static std::vector<float_64> get()
    {
        std::vector<float_64> unit( 1, 1.0 );
        return unit;
    }

    static std::vector<float_64> getDimension()
    {
        // unitless
        return std::vector<float_64>( NUnitDimension, 0.0 );
    }
};

template<typename T_Frame>
struct OpenPMDUnit<wasScattered, T_Frame>
{
    static std::vector<float_64> get()
    {
        std::vector<float_64> unit( 1, 1.0 );
        return unit;
    }

    static std::vector<float_64> getDimension()
    {
        // unitless
        return std::vector<float_64>( NUnitDimension, 0.0 );
    }
};

} // namespace traits
} // namespace parataxis
