/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include "particles/scatterer/Never.hpp"
#include "particles/scatterer/OnThreshold.hpp"
#include "particles/scatterer/OnRandom.hpp"
#include "particles/scatterer/Fixed.hpp"
#include "particles/scatterer/LinearDensity.hpp"
#include "particles/scatterer/Reflect.hpp"
#include "particles/scatterer/RandomDirection.hpp"

namespace parataxis { namespace particles { namespace scatterer {

    namespace conditions {
        struct Never;
        struct OnTreshold;
        struct OnRandom;
    }  // namespace conditions

    namespace direction {
        struct Reflect;
        struct Fixed;
        struct LinearDensity;
        struct RandomDirection;
    }  // namespace direction

}}}  // namespace parataxis

namespace PMacc {
namespace traits {

    template<>
    struct Resolve<parataxis::particles::scatterer::conditions::Never>
    {
        using type = parataxis::particles::scatterer::Never<>;
    };

    template<>
    struct Resolve<parataxis::particles::scatterer::conditions::OnThreshold>
    {
        using Config = parataxis::particles::scatterer::conditions::OnThreshold;
        using type = parataxis::particles::scatterer::OnThreshold<Config>;
    };

    template<>
    struct Resolve<parataxis::particles::scatterer::conditions::OnRandom>
    {
        using Config = parataxis::particles::scatterer::conditions::OnRandom;
        using type = parataxis::particles::scatterer::OnRandom<Config>;
    };

    template<>
    struct Resolve<parataxis::particles::scatterer::direction::Fixed>
    {
        using Config = parataxis::particles::scatterer::direction::Fixed;
        using type = parataxis::particles::scatterer::Fixed<Config>;
    };

    template<>
    struct Resolve<parataxis::particles::scatterer::direction::LinearDensity>
    {
        using Config = parataxis::particles::scatterer::direction::LinearDensity;
        using type = parataxis::particles::scatterer::LinearDensity<Config>;
    };

    template<>
    struct Resolve<parataxis::particles::scatterer::direction::Reflect>
    {
        using type = parataxis::particles::scatterer::Reflect<>;
    };

    template<>
    struct Resolve<parataxis::particles::scatterer::direction::RandomDirection>
    {
        using Config = parataxis::particles::scatterer::direction::RandomDirection;
        using type = parataxis::particles::scatterer::RandomDirection<Config>;
    };

}  // namespace traits
}  // namespace PMacc
