#pragma once

#include "particles/scatterer/Never.hpp"
#include "particles/scatterer/OnThreshold.hpp"
#include "particles/scatterer/OnRandom.hpp"
#include "particles/scatterer/Reflect.hpp"
#include "particles/scatterer/RandomDirection.hpp"

namespace PMacc {
namespace traits {

    template<>
    struct Resolve<xrt::particles::scatterer::conditions::Never>
    {
        using type = xrt::particles::scatterer::Never<>;
    };

    template<>
    struct Resolve<xrt::particles::scatterer::conditions::OnThreshold>
    {
        using Config = xrt::particles::scatterer::conditions::OnThreshold;
        using type = xrt::particles::scatterer::OnThreshold<Config>;
    };

    template<>
    struct Resolve<xrt::particles::scatterer::conditions::OnRandom>
    {
        using Config = xrt::particles::scatterer::conditions::OnRandom;
        using type = xrt::particles::scatterer::OnRandom<Config>;
    };

    template<>
    struct Resolve<xrt::particles::scatterer::direction::Reflect>
    {
        using type = xrt::particles::scatterer::Reflect<>;
    };

    template<>
    struct Resolve<xrt::particles::scatterer::direction::RandomDirection>
    {
        using type = xrt::particles::scatterer::RandomDirection<>;
    };

}  // namespace traits
}  // namespace PMacc
