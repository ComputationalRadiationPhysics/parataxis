/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

namespace parataxis {
namespace laserConfig {

    /** Maximum in-cell position for the direction in which photons enter */
    constexpr float_X MAX_X = SPEED_OF_LIGHT * DELTA_T / CELL_WIDTH;
    constexpr float_X MAX_Y = SPEED_OF_LIGHT * DELTA_T / CELL_HEIGHT;
    constexpr float_X MAX_Z = SPEED_OF_LIGHT * DELTA_T / CELL_DEPTH;

    /** Size of the area in which photons will be spawned */
    PMACC_CONST_VECTOR(float_X, simDim, distSize, MAX_X * CELL_WIDTH, CELL_HEIGHT, CELL_DEPTH);

    static_assert(DIRECTION < simDim, "Laser direction out of range");
    constexpr PMacc::ExchangeType EXCHANGE_DIR = (DIRECTION == 0) ? PMacc::LEFT :
                                                 (DIRECTION == 1) ? PMacc::TOP :
                                                                    PMacc::FRONT;

}  // namespace laserConfig
}  // namespace parataxis

#include "particles/initPolicies/ConstNumPhotons.hpp"

#include "particles/initPolicies/ConstDistribution.hpp"
#include "particles/initPolicies/EqualPhotonsDistribution.hpp"

#include "particles/initPolicies/ConstPosition.hpp"
#include "particles/initPolicies/EvenDistPosition.hpp"
#include "particles/initPolicies/RandomPosition.hpp"

#include "particles/initPolicies/PlaneWavePhase.hpp"

#include "particles/initPolicies/ConstDirection.hpp"

#if (PARATAXIS_ENABLE_HDF5 == 1)
#   include "plugins/hdf5/LaserSource.hpp"
#endif

#include <traits/Resolve.hpp>
#include <math/ConstVector.hpp>

namespace parataxis {
namespace laserConfig {

    namespace photonCount {
        struct Const;
        struct HDF5Profile;
    }  // namespace photonCount

    namespace distribution {
        struct Const;
        struct EqualToPhotons;
    }  // namespace distribution

    namespace position {
        struct Const;
        struct EvenDistance;
        struct Random;
    }  // namespace position

}  // namespace laserConfig
}  // namespace parataxis

namespace PMacc {
namespace traits {

    /* NumPhotons */

    template<>
    struct Resolve<parataxis::laserConfig::photonCount::Const>
    {
        using Value = parataxis::laserConfig::photonCount::Const;
        using type  = parataxis::particles::initPolicies::ConstNumPhotons<Value>;
    };
    template<>
    struct Resolve<parataxis::laserConfig::photonCount::HDF5Profile>
    {
        using type  = parataxis::plugins::hdf5::GetDistribution<
                parataxis::plugins::hdf5::LaserSource<parataxis::PIC_Photons>
                >;
    };

    /* Distribution */

    template<>
    struct Resolve<parataxis::laserConfig::distribution::Const>
    {
        using Value = parataxis::laserConfig::distribution::Const;
        using type  = parataxis::particles::initPolicies::ConstDistribution<Value>;
    };
    template<>
    struct Resolve<parataxis::laserConfig::distribution::EqualToPhotons>
    {
        using type  = parataxis::particles::initPolicies::EqualPhotonsDistribution;
    };

    /* Position */

    template<>
    struct Resolve<parataxis::laserConfig::position::Const>
    {
        using Value = parataxis::laserConfig::position::Const;
        using type  = parataxis::particles::initPolicies::ConstPosition<Value>;
    };
    template<>
    struct Resolve<parataxis::laserConfig::position::EvenDistance>
    {
        using type  = parataxis::particles::initPolicies::EvenDistPosition;
    };
    template<>
    struct Resolve<parataxis::laserConfig::position::Random>
    {
        using Value = parataxis::laserConfig::position::Random;
        using type  = parataxis::particles::initPolicies::RandomPosition<parataxis::PIC_Photons>;
    };

    /* Phase */
    template<>
    struct Resolve<parataxis::laserConfig::phase::PlaneWave>
    {
        using type  = parataxis::particles::initPolicies::PlaneWavePhase<parataxis::PIC_Photons>;
    };

    /* Direction */
    template<>
    struct Resolve<parataxis::laserConfig::direction::Const>
    {
        using Value = parataxis::laserConfig::direction::Const;
        using type  = parataxis::particles::initPolicies::ConstDirection<Value>;
    };

}  // namespace traits
}  // namespace PMacc
