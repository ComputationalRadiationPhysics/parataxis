#pragma once

#include "generators.hpp"

namespace xrt {
namespace initialDensity {
namespace AvailableGenerators {

    struct Const;
    struct Line;
    struct Cuboid;
    struct Cylinder;
    struct DoubleSlit;
    struct RaisingLine;

}  // namespace AvailableGenerators
}  // namespace initialDensity
}  // namespace xrt

namespace PMacc { namespace traits {

    template<>
    struct Resolve<xrt::initialDensity::AvailableGenerators::Const>
    {
        using type  = xrt::generators::Const<xrt::float_X, xrt::initialDensity::AvailableGenerators::Const>;
    };

    template<>
    struct Resolve<xrt::initialDensity::AvailableGenerators::Line>
    {
        using type  = xrt::generators::Line<xrt::float_X, xrt::initialDensity::AvailableGenerators::Line>;
    };

    template<>
    struct Resolve<xrt::initialDensity::AvailableGenerators::Cuboid>
    {
        using type  = xrt::generators::Cuboid<xrt::float_X, xrt::initialDensity::AvailableGenerators::Cuboid>;
    };

    template<>
    struct Resolve<xrt::initialDensity::AvailableGenerators::Cylinder>
    {
        using type  = xrt::generators::Cylinder<xrt::float_X, xrt::initialDensity::AvailableGenerators::Cylinder>;
    };

    template<>
    struct Resolve<xrt::initialDensity::AvailableGenerators::DoubleSlit>
    {
        using type  = xrt::generators::DoubleSlit<xrt::float_X, xrt::initialDensity::AvailableGenerators::DoubleSlit>;
    };

    template<>
    struct Resolve<xrt::initialDensity::AvailableGenerators::RaisingLine>
    {
        using type  = xrt::generators::RaisingLine<xrt::float_X, xrt::initialDensity::AvailableGenerators::RaisingLine>;
    };

}}
