/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include "generators.hpp"

namespace parataxis {
namespace initialDensity {
namespace AvailableGenerators {

    struct Const;
    struct Line;
    struct Cuboid;
    struct Cylinder;
    struct DoubleSlit;
    struct RaisingLine;
    struct Edge;
    struct Strips;
    struct CombinedGenerator;

}  // namespace AvailableGenerators
}  // namespace initialDensity
}  // namespace parataxis

namespace PMacc { namespace traits {

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::Const>
    {
        using type  = parataxis::generators::Const<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::Const>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::Line>
    {
        using type  = parataxis::generators::Line<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::Line>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::Cuboid>
    {
        using type  = parataxis::generators::Cuboid<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::Cuboid>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::Cylinder>
    {
        using type  = parataxis::generators::Cylinder<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::Cylinder>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::Edge>
    {
        using type  = parataxis::generators::Edge<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::Edge>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::DoubleSlit>
    {
        using type  = parataxis::generators::DoubleSlit<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::DoubleSlit>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::RaisingLine>
    {
        using type  = parataxis::generators::RaisingLine<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::RaisingLine>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::Strips>
    {
        using type  = parataxis::generators::Strips<parataxis::float_X, parataxis::initialDensity::AvailableGenerators::Strips>;
    };

    template<>
    struct Resolve<parataxis::initialDensity::AvailableGenerators::CombinedGenerator>
    {
        using Cfg = parataxis::initialDensity::AvailableGenerators::CombinedGenerator;
        using type  = parataxis::generators::CombinedGenerator<parataxis::float_X, Cfg>;
    };

}}
