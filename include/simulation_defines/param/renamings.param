/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include <traits/Resolve.hpp>
#include <traits/HasFlag.hpp>
#include <traits/GetFlagType.hpp>
#include <algorithms/TypeCast.hpp>

/* Fwd declare namespace */
namespace PMacc {
namespace nvidia {
namespace rng {
}  // namespace rng
}  // namespace nvidia
}  // namespace PMacc

namespace xrt {

    using PMacc::algorithms::precisionCast::precisionCast;

    /* Shortcuts for namespaces
     */
    namespace PMaccMath = PMacc::algorithms::math;
    namespace nvrng = PMacc::nvidia::rng;

    template<typename T>
    using Resolve_t = typename PMacc::traits::Resolve<T>::type;

    template<typename T_Object, typename T_Flag>
    using HasFlag_t = typename PMacc::traits::HasFlag<T_Object, T_Flag>::type;

    template<typename T_Object, typename T_Flag>
    using GetFlagType_t = typename PMacc::traits::GetFlagType<T_Object, T_Flag>::type;

    template<typename T_Object, typename T_Flag>
    using GetResolvedFlag_t = Resolve_t<GetFlagType_t<T_Object, T_Flag>>;

    template<bool T_condition, typename T_Then, typename T_Else>
    using conditional_t = typename std::conditional<T_condition, T_Then, T_Else>::type;

    template< class T >
    using remove_reference_t = typename std::remove_reference<T>::type;

}  // namespace xrt
