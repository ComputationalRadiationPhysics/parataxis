#pragma once

#include <traits/Resolve.hpp>
#include <traits/HasFlag.hpp>
#include <traits/GetFlagType.hpp>

/* Fwd declare namespace */
namespace PMacc {
namespace nvidia {
namespace rng {
}  // namespace rng
}  // namespace nvidia
}  // namespace PMacc

namespace xrt {

    /* Shortcuts for namespaces
     */
    namespace PMaccMath = PMacc::algorithms::math;
    namespace nvrng = PMacc::nvidia::rng;

    template<typename T>
    using Resolve_t = typename PMacc::traits::Resolve<T>::type;

    template<typename T_Object, typename T_Flag>
    using HasFlag_t = typename PMacc::traits::HasFlag<T_Object, T_Flag>::type;

    template<typename T_Object, typename T_Flag>
    using GetFlagType_t = typename PMacc::traits::GetFlagType<T_Object, T_Flag>::type;

    template<bool T_condition, typename T_Then, typename T_Else>
    using conditional_t = typename std::conditional<T_condition, T_Then, T_Else>::type;

}  // namespace xrt
