/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

namespace xrt {

    constexpr float_64 PI = 3.141592653589793238462643383279502884197169399;

    namespace SI {

        /** unit: m / s */
        constexpr float_64 SPEED_OF_LIGHT = 2.99792458e8;
        /** planck constant h, unit: Js */
        constexpr float_64 PLANCK_CONSTANT = 6.626070040e-34;
        // Electron properties
        /** unit: kg */
        constexpr float_64 ELECTRON_MASS = 9.109382e-31;
        /** unit: C */
        constexpr float_64 ELECTRON_CHARGE = -1.602176e-19;
    }  // namespace SI

    // converts
    //
    // UNIT_A to UNIT_B
    //
    // CONVENTION: WE DO NOT CONVERT FROM ANY STRANGE UNIT TO UNITLESS UNITS DIRECTLY!
    //             convert steps: INPUT -> float_64_convert to SI -> float_64_convert to unitless
    //                                  -> cast to float
    // WE DO NOT define "UNIT_ENERGY_keV" or something similar! Never!
    // Stay SI, stay free ;-)
    //
    // example:
    //   // some particle physicist beloved input:
    //   const float_64 An_Arbitrary_Energy_Input_keV = 30.0; // unit: keV
    //
    //   // first convert to SI (because SI stays our standard Unit System!)
    //   const float_64 An_Arbitrary_Energy_Input_SI = An_Arbitrary_Energy_Input_keV * UNITCONV_keV_to_Joule // unit: Joule
    //
    //   // now the "real" convert to our internal unitless system
    //   const float_X An_Arbitrary_Energy_Input = float_X(An_Arbitrary_Energy_Input_SI / UNIT_ENERGY) // unit: none
    //
    // As a convention, we DO NOT use the short track:
    //   const float_64 An_Arbitrary_Energy_Input_keV = 30.0; // unit: keV
    //   const float_X An_Arbitrary_Energy_Input = float_X(An_Arbitrary_Energy_Input_SI * UNITCONV_keV_to_Joule / UNIT_ENERGY) // unit: none
    //
    constexpr float_64 UNITCONV_keV_to_Joule = 1.60217646e-16;
    constexpr float_64 UNITCONV_Joule_to_keV = (1.0 / UNITCONV_keV_to_Joule);
}  // namespace xrt
