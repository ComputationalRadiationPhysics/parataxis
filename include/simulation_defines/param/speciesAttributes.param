#pragma once

#include <identifier/alias.hpp>
#include <identifier/value_identifier.hpp>
#include <particles/Identifier.hpp>

#include <pmacc_types.hpp>

namespace xrt {

    /** relative (to cell origin) in-cell position of a particle
     * With this definition we don't define any type like float3, double3,...
     * This is only a name without a specialization
     */
    alias(position);

    /** specialization for the relative in-cell position.
     *  64 bit required to get enough accuracy after ~150 (in praxis ~600-800) timesteps */
    value_identifier(floatD_64, position_pic, floatD_64::create(0.));
    /** direction in which the photon is moving */
    value_identifier(float3_X, direction, float3_X::create(0.));
    /** global unique Id of a particle */
    value_identifier(uint32_t, globalId, 0);

    /** Timestep at which the particle was created/ entered in the volume */
    value_identifier(uint32_t, creationTime, 0);
    /** Phase of the particle at entering the volume */
    value_identifier(float_X, startPhase, 0);

    /** alias for particle pusher */
    alias(particlePusher);

    /** alias for particle scatter condition (default: None)
     * \see scattererConfig.param */
    alias(particleScatterCondition);

    /** alias for particle scatter direction (default: Reflect)
     * \see scattererConfig.param */
    alias(particleScatterDirection);

    /** alias for the particle detector (default: None)
     * \see detectorConfig.param */
    alias(particleDetector);

    /** Wavelength for photon waves */
    alias(wavelength);
    /** Energy photon waves, can be used instead of the wavelength as E = h*f */
    alias(energy);

    /** Amplitude of a wave */
    alias(amplitude);
}  // namespace xrt
