/**
 * Copyright 2014-2016 Rene Widera, Marco Garten, Alexander Grund, Axel Huebl,
 *                     Heiko Burau, Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include <pmacc_types.hpp>
#include <identifier/alias.hpp>
#include <identifier/value_identifier.hpp>
#include <particles/Identifier.hpp>
#include <particles/IdProvider.def>

namespace xrt {

    /** relative (to cell origin) in-cell position of a particle
     * With this definition we don't define any type like float3, double3,...
     * This is only a name without a specialization
     */
    alias(position);

    /** Global cell index of a particle (calculated and used only in HDF5 dump) */
    value_identifier(Space, globalCellIdx_pic, Space());

    /** specialization for the relative in-cell position. */
    value_identifier(floatD_X, position_pic, floatD_X::create(0.));
    /** direction in which the photon is moving */
    value_identifier(float3_X, direction, float3_X::create(0.));
    /** global unique Id of a particle */
    value_identifier(uint64_t, particleId, PMacc::IdProvider<simDim>::getNewId());

    /** Timestep at which the particle was created/ entered in the volume */
    value_identifier(uint32_t, creationTime, 0);
    /** Phase of the particle at entering the volume */
    value_identifier(float_X, startPhase, 0);
    /** Only used when single scattering is enforced. Set to true after particle was first scattered */
    value_identifier(bool, wasScattered, false);

    /** alias for particle pusher */
    alias(particlePusher);

    /** alias for particle scatter condition (default: None)
     * \see scattererConfig.param */
    alias(particleScatterCondition);

    /** alias for particle scatter direction (default: Reflect)
     * \see scattererConfig.param */
    alias(particleScatterDirection);

    /** alias for the particle detector (default: None)
     * \see detectorConfig.param */
    alias(particleDetector);

    /** Wavelength for photon waves */
    alias(wavelength);
    /** Energy photon waves, can be used instead of the wavelength as E = h*f */
    alias(energy);

    /** Amplitude of a wave */
    alias(amplitude);

    alias(mass);
    alias(charge);
}  // namespace xrt
