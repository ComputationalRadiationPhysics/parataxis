#pragma once

#include "simulation_defines.hpp"
#include "particles/Particles.hpp"
#include "particles/XrtParticleDescription.hpp"
#include <compileTime/conversion/MakeSeq.hpp>
#include <boost/mpl/vector.hpp>
#include <boost/mpl/string.hpp>

namespace xrt {

    /*########################### define particle attributes #####################*/

    /* describe attributes of a particle*/
    typedef PMacc::MakeSeq<
            position<position_pic>,
            momentum,
            globalId,
            creationTime,
            startPhase
    >::type DefaultParticleAttributes;

    typedef PMacc::MakeSeq<
            DefaultParticleAttributes
    >::type DefaultAttributesSeq;

    /*########################### end particle attributes ########################*/

    /*########################### define species #################################*/

    /* 0.1nm wave length for X-Rays */
    value_identifier(float_X, wavelengthPhotons, 0.1 * 1e-9);

    typedef bmpl::vector<
            particlePusher<particles::pusher::Photon>,
            particleScatterCondition<particles::scatterer::conditions::OnRandom>,
            particleScatterDirection<particles::scatterer::direction::RandomDirection>,
            wavelength<wavelengthPhotons>
    > ParticleFlagsPhotons;

    /*define species photons*/
    typedef Particles<
        xrt::particles::ParticleDescription<
            bmpl::string<'p'>,
            SuperCellSize,
            DefaultAttributesSeq,
            ParticleFlagsPhotons
        >
    > PIC_Photons;

}  // namespace xrt
