/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

/**
 * Appends kernel arguments to generated code and activates kernel task.
 *
 * @param ... parameters to pass to kernel
 */
#define PIC_PMACC_CUDAPARAMS(...) (__VA_ARGS__, mapper);                       \
        PMACC_ACTIVATE_KERNEL                                                  \
    }   /*this is used if call is EventTask.waitforfinished();*/

/**
 * Configures block and grid sizes and shared memory for the kernel.
 *
 * gridSize for kernel call is set by mapper
 *
 * @param block size of block on GPU
 * @param ... amount of shared memory for the kernel (optional)
 */
#define PIC_PMACC_CUDAKERNELCONFIG(block, ...) <<<mapper.getGridDim(), (block), \
    __VA_ARGS__+0,                                                              \
    taskKernel->getCudaStream()>>> PIC_PMACC_CUDAPARAMS

/**
 * Calls a CUDA kernel and creates an EventTask which represents the kernel.
 *
 * Creates a AreaMapping mapper
 * gridSize for kernel call is set by mapper
 * last argument of kernel call is add by mapper and is the mapper
 *
 * @param kernelName name of the CUDA kernel (can also used with templates etc. myKernel<1>)
 * @param description cellDescription aka mapDescription
 * @param area area type for which the kernel is called
 */
#define __cudaKernelArea(kernelName, description, area) {                                                 \
    CUDA_CHECK_KERNEL_MSG(cudaDeviceSynchronize(), "picKernelArea crash before kernel call");             \
    PMacc::AreaMapping<area, MappingDesc> mapper(description);                                            \
    PMacc::TaskKernel *taskKernel =  PMacc::Environment<>::get().Factory().createTaskKernel(#kernelName); \
    kernelName PIC_PMACC_CUDAKERNELCONFIG
