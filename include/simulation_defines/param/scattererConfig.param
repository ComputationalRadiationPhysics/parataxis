#pragma once

namespace xrt {
namespace particles {
namespace scatterer {

    namespace conditions {

        /** No scattering at all */
        struct Never;
        /** Scattering when density field is above threshold */
        struct OnThreshold
        {
            /** Threshold to use */
            static constexpr float_X threshold = 1e-10;
        };
        /** Scattering randomly with a probability as a function of
         *  the density at the particles current cell
         */
        struct OnRandom
        {
            HDINLINE static float_X
            calcProbability(float_X density)
            {
                return
                /** Formula for the function density->probability */
                density
                ;
            }
        };

    }  // namespace conditions

    namespace direction {

        /** Inverts the momentum */
        struct Reflect;
        /** Scatter in a random direction specified by evenly distributed spherical coordinates */
        struct RandomDirection{
            /** Minimum and maximum value for the polar angle (range should be <= PI) */
            static constexpr float_64 minPolar = PI / 4;
            static constexpr float_64 maxPolar = PI * 3./4.;
            /** Minimum and maximum value for the azimuth angle (range should always be [0, 2*PI) ) */
            static constexpr float_64 minAzimuth = 0;
            static constexpr float_64 maxAzimuth = 2*PI;
        };

    }  // namespace direction

}  // namespace scatterer
}  // namespace particles
}  // namespace xrt
