/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include "math/vector/compile-time/UInt32.hpp"

namespace xrt {
namespace initialDensity {

    namespace AvailableGenerators{
        /* List of possible generators: */
        /** Constant value at every point */
        struct Const
        {
            /** Value used */
            static constexpr float_64 value = 0;
        };

        /** Simple line(2D)/plane(3D) */
        struct Line
        {
            /** Dimension which the line/plan cuts */
            static constexpr uint32_t nDim = 0;
            /** Offset in cells where the line/plane is drawn */
            static constexpr size_t offset = 50;
            /** Value used */
            static constexpr float_64 value = 1;
        };

        /** Cuboid in 3D or rectangle in 2D */
        struct Cuboid
        {
            using Offset = PMacc::math::CT::UInt32<
                    /** Offset in cells in x-direction */
                    10
                    /** Offset in cells in y-direction */,
                    0
                    /** Offset in cells in z-direction */,
                    0
                    >;
            using Size = PMacc::math::CT::UInt32<
                    /** Size in cells in x-direction */
                    2048
                    /** Size in cells in y-direction */,
                    2048
                    /** Size in cells in z-direction */,
                    2048
                    >;
            /** Value used */
            static constexpr float_64 value = 1;
        };

        /** Cylinder in 3D or Circle in 2D */
        struct Cylinder
        {
            /** Height in cells */
            static constexpr uint32_t height = 1;
            /** Radius in cells */
            static constexpr uint32_t radius = 1;
            /** Position of the center point of one side / Middle of circle */
            using Position = PMacc::math::CT::UInt32<
                    /** cells in x-direction */
                    10
                    /** cells in y-direction */,
                    128 / 2
                    /** cells in z-direction */,
                    128 / 2
                    >;
            /** Value used */
            static constexpr float_64 value = 1;
        };

        /**
         * Create an "edge", that is everything below a linear function (m*x+n) is filled
         */
        struct Edge
        {
            /** offset in cells into the room (X-direction) */
            static constexpr uint32_t roomPos = 1;
            /** (width in cells of the volume containing the slit (size in X) */
            static constexpr uint32_t roomWidth = 1;

            static constexpr float_32 m = 1;
            static constexpr float_32 n = 0;
            /** Value used */
            static constexpr float_64 value = 1;
        };

        /** 2 slits of the same width and infinite height,
         *  extending perpendicular to x-axis in 3D */
        struct DoubleSlit{
            /** (3D only) offset in cells into the room (X-direction) */
            static constexpr uint32_t roomPos = 10;
            /** (3D only) width in cells of the volume containing the slit (size in X) */
            static constexpr uint32_t roomWidth = 1;
            /** If true, the slit is rotated by 90 degrees. Default dir of infinite extent is Z (in 3D) */
            static constexpr bool rotated = false;
            /** Offset in cells of the slits */
            static constexpr uint32_t offset = (256 - 8) / 2;
            /** Width in cells of the slits */
            static constexpr uint32_t width = 3;
            /** Spacing in cells between the slits */
            static constexpr uint32_t spacing = 8;
            /** Value used */
            static constexpr float_64 value = 1;
        };

        struct RaisingLine
        {
            /** Dimension in which the line extents (1=y, 2=z) */
            static constexpr uint32_t nDim = 1;
            static constexpr size_t offsetX = 11;
            static constexpr size_t offsetOther = 10;
        };

        //TODO: Make generic
        /** Combines 2 DoubleSlit generators with MIN or MAX*/
        struct CombinedDoubleSlit
        {
            using Cfg1 = DoubleSlit;
            using Cfg2 = DoubleSlit;
            /** If true, this uses MAX else MIN */
            static constexpr bool useMAX = true;
        };
    };

    using Generator =
            /** Generator used */
            AvailableGenerators::DoubleSlit;

}  // namespace initialDensity
}  // namespace xrt
