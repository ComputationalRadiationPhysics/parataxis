/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

namespace xrt {
namespace particles {
namespace scatterer {

    namespace conditions {

        /** No scattering at all */
        struct Never;
        /** Scattering when density field is above threshold */
        struct OnThreshold
        {
            /** Threshold to use */
            static constexpr float_X threshold = 1e-10;
        };
        /** Scattering randomly with a probability as a function of
         *  the density at the particles current cell
         */
        struct OnRandom
        {
            HDINLINE static float_X
            calcProbability(float_X density)
            {
                return
                /** Formula for the function density->probability */
                density
                ;
            }
        };

    }  // namespace conditions

    namespace direction {
        /** Scatter in a random direction specified by evenly distributed spherical coordinates */
        struct RandomDirection{
            /** Minimum and maximum value for the polar angle (range should be <= PI) */
            static constexpr float_64 minPolar = 0;
            static constexpr float_64 maxPolar = 0.005;
            /** Minimum and maximum value for the azimuth angle (range should always be [-PI, PI) ) */
            static constexpr float_64 minAzimuth = -PI;
            static constexpr float_64 maxAzimuth = PI;
        };

    }  // namespace direction

}  // namespace scatterer
}  // namespace particles
}  // namespace xrt
