/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include "simulation_defines.hpp"
#include "particles/Particles.hpp"
#include "particles/ParataxisParticleDescription.hpp"
#include <compileTime/conversion/MakeSeq.hpp>
#include <boost/mpl/vector.hpp>
#include <boost/mpl/string.hpp>

namespace parataxis {

    /*########################### define particle attributes #####################*/

    /* describe attributes of a particle*/
    typedef PMacc::MakeSeq<
            position<position_pic>,
            direction,
            //particleId,
            creationTime,
            startPhase
    >::type DefaultParticleAttributes;

    typedef PMacc::MakeSeq<
            DefaultParticleAttributes
    >::type DefaultAttributesSeq;

    /*########################### end particle attributes ########################*/

    /*########################### define species #################################*/

    /* wave length for photons in m */
    value_identifier(float_X, wavelengthPhotons, 0.1 * 1e-9);
    /* energy for photons in J */
    value_identifier(float_X, energyPhotons, 8 * UNITCONV_keV_to_Joule);
    value_identifier(float_X, amplitudePhotons, 1);
    value_identifier(float_X, massPhotons, 0);
    value_identifier(float_X, chargePhotons, 0);

    typedef bmpl::vector<
            particlePusher<particles::pusher::Photon>,
            particleScatterCondition<particles::scatterer::conditions::OnThreshold>,
            particleScatterDirection<particles::scatterer::direction::Fixed>,
            particleDetector<detector::PhotonDetector>,
            wavelength<wavelengthPhotons>,
            //energy<energyPhotons>,
            amplitude<amplitudePhotons>,
            mass<massPhotons>,
            charge<chargePhotons>
    > ParticleFlagsPhotons;

    /*define species photons*/
    typedef Particles<
        parataxis::particles::ParticleDescription<
            bmpl::string<'p'>,
            SuperCellSize,
            DefaultAttributesSeq,
            ParticleFlagsPhotons
        >
    > PIC_Photons;

}  // namespace parataxis
