/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include <math/vector/Float.hpp>

#ifndef PARAM_LASER_STEP_LEN
#   define PARAM_LASER_STEP_LEN 16
#endif

#ifndef PARAM_LASER_DISTRIBUTION
#   define PARAM_LASER_DISTRIBUTION Const
#endif

namespace xrt {
namespace laserConfig {

    /* Initialization for the 'laser' */

    /** Specifies the distribution (number of particles at a given position and time) */
    namespace distribution {
        /* Possible values: */
        /** Same number of particles at all points */
        struct Const{
            /** Value to return */
            static constexpr int32_t numParts = 10;
        };
        
        struct PtOnly{
            Space2D localOffset2D;
            int32_t numParts;
            HINLINE PtOnly()
            {
                const Space localOffset = Environment::get().SubGrid().getLocalDomain().offset;
                localOffset2D = Space2D(localOffset.y(), localOffset.z());
            }
            DINLINE void
            init(Space localCellIdx)
            {
                if(localCellIdx.y() + localOffset2D.x() == PARAM_CUBE_Y && localCellIdx.z() + localOffset2D.y() == PARAM_CUBE_Z)
                    numParts = 150;
                else
                    numParts = 0;
            }
            
            DINLINE int32_t
            operator()(uint32_t timeStep) const
            {
                return numParts;
            }
        };

        /** Value used in the simulation */
        using UsedValue = PARAM_LASER_DISTRIBUTION;

    }  // namespace distribution

    /** Specifies the in-cell position of the particles */
    namespace position {

        /* Possible values: */
        /** Same position at all points */
        struct Const{
            /** In-Cell position [0,1) in x-direction */
            static constexpr float_X X = 0.001;
            /** In-Cell position [0,1) in y-direction */
            static constexpr float_X Y = 0.5;
            /** In-Cell position [0,1) in z-direction */
            static constexpr float_X Z = 0.5;
        };
        /** Positions the particles evenly in the whole (possible) cell area) */
        struct EvenDistance;
        /** Positions the particles randomly */
        struct Random;

        /** Value used in the simulation */
        using UsedValue = Const;

    }  // namespace position

    namespace phase {
        /* Possible values: */
        /** Wave front perpendicular to propagation, place-invariant phase */
        struct PlaneWave;

        /** Value used in the simulation */
        using UsedValue = PlaneWave;
    }  // namespace phase

    namespace direction {
        /* Possible values: */
        /** Same direction at all points */
        struct Const{
            /** direction in x-direction */
            static constexpr float_X X = 1;
            /** direction in y-direction */
            static constexpr float_X Y = 0;
            /** direction in z-direction */
            static constexpr float_X Z = 0;
        };

        /** Value used in the simulation */
        using UsedValue = Const;
    }  // namespace direction


    /** Laser pulse length in s */
    constexpr float_X PULSE_LENGTH = SI::DELTA_T * PARAM_LASER_STEP_LEN;
    /** Entry-Direction of the laser pulse: 0=Left->Right, 1=Top->Bottom, 2=Front->Back
     *  Ignored for 2D, there it is always Left->Right */
    constexpr int32_t DIRECTION = 0;

}  // namespace laserConfig
}  // namespace xrt
