/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include <random/distributions/Uniform.hpp>

#ifndef PARAM_FACTORY
#   define PARAM_FACTORY 0
#endif
#ifndef PARAM_FACTORZ
#   define PARAM_FACTORZ 0
#endif

namespace xrt {
namespace particles {
namespace scatterer {

    namespace conditions {

        /** Scattering when density field is above threshold */
        struct OnThreshold
        {
            /** Threshold to use */
            static constexpr float_X threshold = 1e-10;
        };

    }  // namespace conditions

    namespace direction {
        /** Scatter to a fixed direction given by the angle in Y and Z */
        struct Fixed{
            static constexpr float_64 angleY = 0;
            static constexpr float_64 angleZ = 9e-3;
        };
        /** This scatters in a direction linear to the density at the point (angle = factorY|Z * density) */
        struct LinearDensity{
            static constexpr float_64 factorY = PARAM_FACTORY;
            static constexpr float_64 factorZ = PARAM_FACTORZ;
        };
        /** Scatter in a random direction specified by evenly distributed spherical coordinates */
        struct RandomDirection{
            /** Minimum and maximum value for the polar angle (range should be <= PI) */
            static constexpr float_64 minPolar = 0;
            static constexpr float_64 maxPolar = 0.01;
            /** Minimum and maximum value for the azimuth angle (range should always be [-Pi, PI) ) */
            static constexpr float_64 minAzimuth = -PI;
            static constexpr float_64 maxAzimuth = PI;
        };
        struct DoubleRandDirection
        {
            template<class T_Unused>
            struct apply{
                using type = DoubleRandDirection;
            };
            using Distribution = PMacc::random::distributions::Uniform<float>;
            using Random = typename RNGProvider::GetRandomType<Distribution>::type;
            static constexpr float_64 angle = 0.01;

            HINLINE explicit
            DoubleRandDirection(uint32_t currentStep): rand(RNGProvider::createRandom<Distribution>())
            {}

            DINLINE void
            init(Space localCellIdx)
            {
                rand.init(localCellIdx);
            }

            template<class T_DensityBox, typename T_Position, typename T_Direction>
            DINLINE void
            operator()(const T_DensityBox& density, const T_Position& pos, T_Direction& dir)
            {
                float_X angleY = rand() * float_X(angle*2) - float_X(angle);
                float_X angleZ = rand() * float_X(angle*2) - float_X(angle);
                dir.x() = 1;
                dir.y() = PMaccMath::tan<trigo_X>(angleY);
                dir.z() = PMaccMath::tan<trigo_X>(angleZ);
                dir = dir / PMaccMath::sqrt<sqrt_X>(PMaccMath::abs2(dir));
            }

        private:
            PMACC_ALIGN8(rand, Random);
        };
    }  // namespace direction

}  // namespace scatterer
}  // namespace particles
}  // namespace xrt
