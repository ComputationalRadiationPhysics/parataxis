#pragma once

#ifndef PARAM_FACTORY
#   define PARAM_FACTORY 0
#endif
#ifndef PARAM_FACTORZ
#   define PARAM_FACTORZ 0
#endif

namespace xrt {
namespace particles {
namespace scatterer {

    namespace conditions {

        /** Scattering when density field is above threshold */
        struct OnThreshold
        {
            /** Threshold to use */
            static constexpr float_X threshold = 1e-10;
        };

    }  // namespace conditions

    namespace direction {
        /** Scatter to a fixed direction given by the angle in Y and Z */
        struct Fixed{
            static constexpr float_64 angleY = 0;
            static constexpr float_64 angleZ = 3e-3;
        };
        /** This scatters in a direction linear to the density at the point (angle = factorY|Z * density) */
        struct LinearDensity{
            static constexpr float_64 factorY = PARAM_FACTORY;
            static constexpr float_64 factorZ = PARAM_FACTORZ;
        };
        /** Scatter in a random direction specified by evenly distributed spherical coordinates */
        struct RandomDirection{
            /** Minimum and maximum value for the polar angle (range should be <= PI) */
            static constexpr float_64 minPolar = 0;
            static constexpr float_64 maxPolar = 0.1;
            /** Minimum and maximum value for the azimuth angle (range should always be [0, 2*PI) ) */
            static constexpr float_64 minAzimuth = 0;
            static constexpr float_64 maxAzimuth = 2*PI;
        };
    }  // namespace direction

}  // namespace scatterer
}  // namespace particles
}  // namespace xrt
