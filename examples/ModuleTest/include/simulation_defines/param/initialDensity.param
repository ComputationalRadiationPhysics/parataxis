/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

#include "math/vector/compile-time/UInt32.hpp"

#ifndef PARAM_OFFSET_X
#   define PARAM_OFFSET_X 30
#endif
#ifndef PARAM_CUBE_Y
#   define PARAM_CUBE_Y 30
#endif
#ifndef PARAM_CUBE_Z
#   define PARAM_CUBE_Z 30
#endif
#ifndef PARAM_GENERATOR
#   define PARAM_GENERATOR Cuboid
#endif

namespace xrt {
namespace initialDensity {

    namespace AvailableGenerators{

        /** Cuboid in 3D or rectangle in 2D */
        struct Cuboid
        {
            using Offset = PMacc::math::CT::UInt32<
                    /** Offset in cells in x-direction */
                    PARAM_OFFSET_X
                    /** Offset in cells in y-direction */,
                    PARAM_CUBE_Y
                    /** Offset in cells in z-direction */,
                    PARAM_CUBE_Z
                    >;
            using Size = PMacc::math::CT::UInt32<
                    /** Size in cells in x-direction */
                    1
                    /** Size in cells in y-direction */,
                    1
                    /** Size in cells in z-direction */,
                    1
                    >;
            /** Value used */
            static constexpr float_64 value = 1;
        };
        struct RaisingLine
        {
            /** Dimension in which the line extents (1=y, 2=z) */
            static constexpr uint32_t nDim = 1;
            static constexpr size_t offsetX = PARAM_OFFSET_X;
            static constexpr size_t offsetOther = 10;
        };
        /** Density only on 2 points */
        struct DoublePoint
        {
            static constexpr size_t offsetX = 31;
            static constexpr size_t offsetY = 10;
            static constexpr size_t offsetZ1 = 0;
            static constexpr size_t offsetZ2 = 14;
            
            template<class T_Idx>
            HDINLINE float_X operator()(T_Idx&& idx) const
            {
                if(idx.x() == offsetX && idx.y() == offsetY &&
                  (idx.z() == offsetZ1 || idx.z() == offsetZ2))
                    return 1;
                return 0;
            }
        };
    };

    using Generator =
            /** Generator used */
            AvailableGenerators::PARAM_GENERATOR;

}  // namespace initialDensity
}  // namespace xrt
