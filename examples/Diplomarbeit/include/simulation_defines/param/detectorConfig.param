/**
 * Copyright 2015-2016 Alexander Grund
 *
 * This file is part of ParaTAXIS.
 *
 * ParaTAXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ParaTAXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ParaTAXIS.  If not, see <http://www.gnu.org/licenses/>.
 */
 
#pragma once

namespace parataxis {
namespace detector {

    namespace particleHandlers {

        /** Simply counts all incoming particles per cell */
        struct CountParticles;
        /** Adds particles per cell with wave properties (phase and amplitude) */
        struct AddWaveParticles;

    }  // namespace particleHandlers

    /** Placeholder when no detector should be used */
    struct NoDetector;

    /**
     * Handles outgoing photons (light-like particles)
     */
    struct PhotonDetector
    {
        using IncomingParticleHandler=
            /**
             * Policy that defines how the detector handles incoming particles
             * Possible values \see particleHandlers
             */
            particleHandlers::AddWaveParticles
            ;

        /**
         * Distance of the detector from the right side of the volume
         * Unit: meter
         */
        static constexpr float_64 distance = 5;
        /**
         * Width and height of each detector cell
         * Unit: meter
         */
        static constexpr float_64 cellWidth = 350e-6;
        static constexpr float_64 cellHeight = 350e-6;

        /* Following values are used for constraint checking but do not influence the simulation */
        /** Minimum number of interference patterns (sequences of minima+maxima) that should be observable
         *  (Regards only half of the detector as other half is mirrored) */
        static constexpr uint32_t minNumMaxima = 10;
        /** Number of pixels required per interference pattern */
        static constexpr uint32_t resolutionFactor = 40;
        /** Structure size (in m) range that should be resolved (e.g. slit width, double slit distance, ...) */
        static constexpr float_64 minStructureSize = 8*4e-9;
        static constexpr float_64 maxStructureSize = 8*4e-9;
        /** Set to true to abort the simulation when the constraints are violated
         *  False still shows warnings*/
        static constexpr bool abortOnConstraintError = true;
    };

}  // namespace detector
}  // namespace parataxis
